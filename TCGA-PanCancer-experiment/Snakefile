from os.path import join
configfile: 'config.yml'
subworkflow dataworkflow:
    workdir:
        "../TCGA-data"

include: '../Snakefile'
include: '../signature-visualization/Snakefile'

wildcard_constraints:
    cancer_type="[A-Z]+"

RAW_DIR = 'raw'
OUTPUT_DIR = 'processed'


# Files from TCGA-data subworkflow
RAW_MUTATION_COUNT_MATRIX_FILE=join(RAW_DIR, "TCGA-{cancer_type}_mutation_count.tsv")
POLE_EXO_FILE=join(OUTPUT_DIR, "TCGA-{cancer_type}_POLE-exo_feature.tsv")
DDR_SILENCING_FILE=join(OUTPUT_DIR, "TCGA-{cancer_type}_Silencing_Knijnenburg2018.tsv")
DDR_MUTATED_FILE=join(OUTPUT_DIR, "TCGA-{cancer_type}_Mutated_Knijnenburg2018.tsv")
DDR_DELETED_FILE=join(OUTPUT_DIR, "TCGA-{cancer_type}_Deleted_Knijnenburg2018.tsv")
LST_FEATURE_FILE=join(OUTPUT_DIR, "TCGA-{cancer_type}_LST_feature.tsv")
MSI_CLASSIFICATION_FILE=join(OUTPUT_DIR, "TCGA-{cancer_type}_msi-classification_Hause2016.tsv")

# these files include the test/train data and the validation data
ALL_MUTATION_COUNT_MATRIX_FILE=join(OUTPUT_DIR, "TCGA-{cancer_type}_all_mutation_count.tsv")
ALL_FEATURE_FILE=join(OUTPUT_DIR, "TCGA-{cancer_type}_all_features.tsv")

VALIDATE_FEATURE_FILE=join(OUTPUT_DIR, "TCGA-{cancer_type}_mutation_count_validate.tsv")
VALIDATE_MC_FILE=join(OUTPUT_DIR, "TCGA-{cancer_type}_clinical_features_validate.tsv")

TEST_FEATURE_FILE=join(OUTPUT_DIR, "features-test_TCGA-{cancer_type}_{fold}.tsv")
TEST_MC_FILE=join(OUTPUT_DIR, "mutation-count-test_TCGA-{cancer_type}_{fold}.tsv")
TRAIN_FEATURE_FILE=join(OUTPUT_DIR, "features-train_TCGA-{cancer_type}_{fold}.tsv")
TRAIN_MC_FILE=join(OUTPUT_DIR, "mutation-count-train_TCGA-{cancer_type}_{fold}.tsv")

PANCAN_TEST_FEATURE_FILE=join(OUTPUT_DIR, "features-test_TCGAPanCan_{fold}.tsv")
PANCAN_TEST_MC_FILE=join(OUTPUT_DIR, "mutation-count-test_TCGAPanCan_{fold}.tsv")
PANCAN_TRAIN_FEATURE_FILE=join(OUTPUT_DIR, "features-train_TCGAPanCan_{fold}.tsv")
PANCAN_TRAIN_MC_FILE=join(OUTPUT_DIR, "mutation-count-train_TCGAPanCan_{fold}.tsv")

# these files contain the combined test/train data
MC_FILE=join(OUTPUT_DIR, "mutation-count-all_TCGA-{cancer_type}.tsv")
PANCAN_MC_FILE=join(OUTPUT_DIR, "mutation-count-all_TCGAPanCan.tsv")
FEATURE_FILE=join(OUTPUT_DIR, "features-all_TCGA-{cancer_type}.tsv")
PANCAN_FEATURE_FILE=join(OUTPUT_DIR, "features-all_TCGAPanCan.tsv")
STM_HELDOUT_LIKELIHOOD_FILE=join(OUTPUT_DIR, 'stm-heldout-likelihood_{covariates}_{K}_TCGAPanCan_{fold}.tsv')
STM_COMBINED_HELDOUT_LIKELIHOOD_FILE=join(OUTPUT_DIR, 'stm-combined-heldout_{covariates}_TCGAPanCan.tsv')
LIKELIHOOD_PLOT=join(OUTPUT_DIR,'likelihood-plot_{covariates1}_{covariates2}_TCGAPanCan.pdf')
STM_SIGNATURES_FILE=join(OUTPUT_DIR, 'stm-exome-signatures_{covariates}_{K}_{project}.tsv')
CANCER_HIERARCHY_FILE=join("data", "cancer_type_hierarchy.yml")
COS_SIM_CANCER_TYPE_NULL_COV_PLOT=join(OUTPUT_DIR, "stm-cancer-type-null-covariate_{K}.pdf")
COS_SIM_CANCER_TYPE_NULL_COV_VALS=join(OUTPUT_DIR, "stm-cancer-type-null-covariate_{K}.tsv")
SIG_COSINE_PLOT=join(OUTPUT_DIR, "{method}-cosine-similarity_{covariates}_{K}_{project}.pdf")

# PARAMETERS
seed="123456"
N_FOLDS=5
FOLDS=range(0, N_FOLDS)

CANCER_TYPES=config["Cancer-Types"]
cancertype_covariates="+".join(CANCER_TYPES)
covariates=cancertype_covariates+"+POLEexo+LST+MSI"
# ddr_covariates = ['ddASCC3',
#        'ddERCC8', 'ddFANCA', 'ddHMGB2', 'ddNEIL2', 'ddNEIL3', 'ddNUDT15',
#        'ddNUDT18', 'ddPOLI', 'ddPPP4R2', 'ddPTEN', 'ddREV3L', 'ddTP53',
#        'ddWRN', 'esALKBH3', 'esDDB2', 'esEXO5', 'esFANCF', 'esHLTF', 'esMGMT',
#        'esMLH1', 'esMLH3', 'esRAD51C', 'mASCC3', 'mATM', 'mATR', 'mATRX',
#        'mBRCA1', 'mBRCA2', 'mBRIP1', 'mCDC5L', 'mCHEK2', 'mCUL3', 'mCUL5',
#        'mDDB1', 'mDNA2', 'mERCC4', 'mERCC6', 'mFANCD2', 'mFANCI', 'mFANCM',
#        'mHERC2', 'mHFM1', 'mIDH1', 'mINO80', 'mLIG4', 'mMLH1', 'mMLH3',
#        'mMSH2', 'mMSH3', 'mMSH6', 'mPARP4', 'mPER1', 'mPMS1', 'mPMS2',
#        'mPOLA1', 'mPOLD1', 'mPOLE', 'mPOLG', 'mPOLQ', 'mPPP4R4', 'mPRKDC',
#        'mPTEN', 'mRAD50', 'mRAD54B', 'mREV1', 'mREV3L', 'mRFC1', 'mRIF1',
#        'mSHPRH', 'mSMARCA4', 'mSMARCAD1', 'mSMARCC1', 'mSMC5', 'mTOPBP1',
#        'mTP53', 'mTP53BP1', 'mTTK', 'mWRN']

MIN_K=5
MAX_K=30
K_RANGE=range(MIN_K, MAX_K+1, 1)

rule all:
    input:
        expand(STM_SIGNATURES_FILE,covariates=covariates, K=10, project="TCGAPanCan"),

rule model_selection:
    input:
        expand(LIKELIHOOD_PLOT, covariates1="NULL", covariates2=covariates),

rule compare_to_cosmic:
    input:
        expand(SIG_COSINE_PLOT, method="stm", covariates=covariates, K=10, project="TCGAPanCan")

rule compare_signatures_10:
    input:
        COS_SIM_CANCER_TYPE_NULL_COV_PLOT.format(K=10)

rule compare_signatures:
    input:
        STM_SIGNATURES_FILE.format(covariates=covariates, K="{K}", project="TCGAPanCan"),
        STM_SIGNATURES_FILE.format(covariates="NULL", K="{K}", project="TCGAPanCan")
    output:
        COS_SIM_CANCER_TYPE_NULL_COV_PLOT,
        COS_SIM_CANCER_TYPE_NULL_COV_VALS,
    script:
        "../signature-visualization/src/plot_cosine_similarity.py"


rule combine_stm_heldout_likelihood_files:
    input:
        expand(STM_HELDOUT_LIKELIHOOD_FILE, K = K_RANGE, fold=FOLDS, covariates="{covariates}")
    output:
        STM_COMBINED_HELDOUT_LIKELIHOOD_FILE
    script:
        "../src/combine_heldout_likelihood_files.py"

rule combine_train_mc_file:
    input:
        expand(TRAIN_MC_FILE, cancer_type=CANCER_TYPES, fold="{fold}")
    output:
        PANCAN_TRAIN_MC_FILE
    script:
        "src/combine_cancer_specific_files.py"

rule combine_test_mc_file:
    input:
        expand(TEST_MC_FILE, cancer_type=CANCER_TYPES, fold="{fold}")
    output:
        PANCAN_TEST_MC_FILE
    script:
        "src/combine_cancer_specific_files.py"

rule combine_train_feature_file:
    input:
        expand(TRAIN_FEATURE_FILE, cancer_type=CANCER_TYPES, fold="{fold}")
    output:
        PANCAN_TRAIN_FEATURE_FILE
    script:
        "src/combine_cancer_specific_files.py"

rule combine_test_feature_file:
    input:
        expand(TEST_FEATURE_FILE, cancer_type=CANCER_TYPES, fold="{fold}")
    output:
        PANCAN_TEST_FEATURE_FILE
    script:
        "src/combine_cancer_specific_files.py"

rule combine_feature_files:
    input:
        expand(FEATURE_FILE, cancer_type=CANCER_TYPES)
    output:
        PANCAN_FEATURE_FILE
    script:
        "src/combine_cancer_specific_files.py"

rule combine_mutation_count_files:
    input:
        expand(MC_FILE, cancer_type=CANCER_TYPES)
    output:
        PANCAN_MC_FILE
    script:
        "src/combine_cancer_specific_files.py"

rule split_test_training_data:
    input:
        MC_FILE,
        FEATURE_FILE
    params:
        seed=seed,
        n_folds=N_FOLDS
    output:
        TEST_MC_FILE,
        TRAIN_MC_FILE,
        TEST_FEATURE_FILE,
        TRAIN_FEATURE_FILE
    script:
        "../src/split_test_training_data.py"

rule split_validate_training:
    input:
        ALL_MUTATION_COUNT_MATRIX_FILE,
        ALL_FEATURE_FILE
    params:
        seed=seed
    output:
        VALIDATE_MC_FILE,
        MC_FILE,
        VALIDATE_FEATURE_FILE,
        FEATURE_FILE
    script:
        "../src/split_training_validate_data.py"

rule clean_feature_mutation_count:
    params:
        seed=seed
    input:
        dataworkflow(RAW_MUTATION_COUNT_MATRIX_FILE),
        dataworkflow(POLE_EXO_FILE),
        dataworkflow(MSI_CLASSIFICATION_FILE),
        dataworkflow(LST_FEATURE_FILE),
    output:
        ALL_MUTATION_COUNT_MATRIX_FILE,
        ALL_FEATURE_FILE
    script:
        "src/create_feature_file.py"
