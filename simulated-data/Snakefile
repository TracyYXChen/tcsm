from os.path import join
from itertools import chain

wildcard_constraints:
    total_n_samples="\d+",
    n_samples="\d+",
    iter_num="\d+"

include: "../Snakefile"
include: '../signature-visualization/Snakefile'
include: "../SomaticSignatures/Snakefile"

# Directories
COSMIC_DIR = 'COSMIC'
OUTPUT_DIR = 'processed'
RAW_DIR = 'raw'

# URLs
SBS96_COUNT_URL = "https://obj.umiacs.umd.edu/mutation-signature-explorer/mutations/PanCanAtlas/processed/counts/counts.TCGA-BRCA_BRCA_mc3.v0.2.8.WXS.SBS-96.tsv"
COSMIC_GENOME_SIGS_URL='https://obj.umiacs.umd.edu/mutation-signature-explorer/signatures/COSMIC/processed/cosmic-signatures.SBS-96.tsv'

# Files
# input to simulate_dmr_data
N_MUTATION_DISTRIBUTION_FILE=join(OUTPUT_DIR, "TCGA-BRCA-nmutations.tsv")
SBS96_COUNT_FILE=join(OUTPUT_DIR, 'TCGA-BRCA-sbs96.tsv')
FEATURES_FILE=join(OUTPUT_DIR, "{total_n_samples}_{iter_num}_features.tsv")
LAMBDA_FILE=join(OUTPUT_DIR, "lambdas.csv")
COSMIC_SIGNATURES = join(COSMIC_DIR, 'cosmic-signatures.tsv')
# output of simulate_dmr_data
DOC_FILE=join(OUTPUT_DIR, "{total_n_samples}_{iter_num}_documents.tsv")
MODEL_FILE=join(OUTPUT_DIR, "{total_n_samples}_{iter_num}_model.npz")
MC_FILE=join(OUTPUT_DIR, "{total_n_samples}_{iter_num}_mutation_count.tsv")
GT_SIGNATURES_FILE=join(OUTPUT_DIR, "{total_n_samples}_{iter_num}_signatures.tsv")
GT_EXPOSURES_FILE=join(OUTPUT_DIR, "{total_n_samples}_{iter_num}_exposures.tsv")

EXP_FEATURES_FILE=join(OUTPUT_DIR, "features-all_{n_samples}-{total_n_samples}-{iter_num}.tsv")
TEST_FEATURE_FILE=join(OUTPUT_DIR, "features-test_{n_samples}-{total_n_samples}-{iter_num}_{fold}.tsv")
TRAIN_FEATURE_FILE=join(OUTPUT_DIR, "features-train_{n_samples}-{total_n_samples}-{iter_num}_{fold}.tsv")
EXP_MC_FILE=join(OUTPUT_DIR, "mutation-count-all_{n_samples}-{total_n_samples}-{iter_num}.tsv")
TEST_MC_FILE=join(OUTPUT_DIR, "mutation-count-test_{n_samples}-{total_n_samples}-{iter_num}_{fold}.tsv")
TRAIN_MC_FILE=join(OUTPUT_DIR, "mutation-count-train_{n_samples}-{total_n_samples}-{iter_num}_{fold}.tsv")

EXP_GT_EXPOSURES_FILE=join(OUTPUT_DIR, "{n_samples}_{total_n_samples}_{iter_num}_exposures.tsv")
EXP_EXPOSURES_FILE=join(OUTPUT_DIR, '{model}-all-count-exposures_{covariates}_{K}_{n_samples}-{total_n_samples}-{iter_num}.tsv')
EXP_SIGNATURES_FILE=join(OUTPUT_DIR, '{model}-exome-signatures_{covariates}_{K}_{n_samples}-{total_n_samples}-{iter_num}.tsv')
DIFFERENTIAL_EXPOSURE_FILE=join(OUTPUT_DIR, '{model}-differential-exposures_{covariates}_{K}_{n_samples}-{total_n_samples}-{iter_num}.tsv')
MSE_TABLE=join(OUTPUT_DIR, "mse_{model}_{covariates}_{K}.tsv")
MSE_PLOT=join(OUTPUT_DIR, "all_mse_{K}.pdf")
COSINE_SIM=join(OUTPUT_DIR, '{model}-cosine-similarity_{covariates}_{K}_{n_samples}-{total_n_samples}-{iter_num}.tsv')
COSINE_TABLE=join(OUTPUT_DIR, "cosine_{covariates}_{model}_{K}.tsv")
COSINE_PLOT=join(OUTPUT_DIR, "all_cosine_{K}.pdf")

# Covariate Significance Test files
SHUFFLED_MC_FILE=join(OUTPUT_DIR, "mutation-count-all_{n_samples}-{total_n_samples}-{iter_num}_{shuffle_num}.tsv")
SHUFFLED_FEATURE_FILE=join(OUTPUT_DIR, "features-all_{n_samples}-{total_n_samples}-{iter_num}_{shuffle_num}.tsv")
SHUFFLED_STM_EXOME_SIGNATURES_FILE=join(OUTPUT_DIR, 'stm-exome-signatures_{covariates}_{K}_{n_samples}-{total_n_samples}-{iter_num}_{shuffle_num}.tsv')
SHUFFLED_SIGMA_FILE=join(OUTPUT_DIR, 'stm-sigma_{covariates}_{K}_{n_samples}-{total_n_samples}-{iter_num}_{shuffle_num}.tsv')
SHUFFLED_GAMMA_FILE=join(OUTPUT_DIR, 'stm-gamma_{covariates}_{K}_{n_samples}-{total_n_samples}-{iter_num}_{shuffle_num}.tsv')
SHUFFLED_COV_SIG_FILE=join(OUTPUT_DIR, 'stm-covariate-significance_{covariate_of_interest}_{covariates}_{K}_{n_samples}-{total_n_samples}-{iter_num}_{shuffle_num}.tsv')
EMP_COV_SIG_FILE=join(OUTPUT_DIR, 'stm-empirical-covariate-significance_{covariate_of_interest}_{covariates}_{K}_{n_samples}-{total_n_samples}-{iter_num}.tsv')

# Model Files
SIGMA_FILE=join(OUTPUT_DIR, 'stm-sigma_{covariates}_{K}_{n_samples}-{total_n_samples}-{iter_num}.tsv')
GAMMA_FILE=join(OUTPUT_DIR, 'stm-gamma_{covariates}_{K}_{n_samples}-{total_n_samples}-{iter_num}.tsv')
COV_SIG_FILE=join(OUTPUT_DIR, 'stm-covariate-significance_{covariate_of_interest}_{covariates}_{K}_{n_samples}-{total_n_samples}-{iter_num}.tsv')

# Heldout likelihood output files
STM_HELDOUT_LIKELIHOOD_FILE=join(OUTPUT_DIR, 'stm-heldout-likelihood_{covariates}_{K}_{n_samples}-{total_n_samples}-{iter_num}_{fold}.tsv')
STM_COMBINED_HELDOUT_LIKELIHOOD_FILE=join(OUTPUT_DIR, 'stm-combined-heldout_{covariates}_{n_samples}-{total_n_samples}-{iter_num}.tsv')
LIKELIHOOD_PLOT=join(OUTPUT_DIR,'likelihood-plot_{covariates1}_{covariates2}_{n_samples}-{total_n_samples}-{iter_num}.pdf')

SIG_PLOT=join(OUTPUT_DIR, "stm-signatures_{covariates}_{K}_{n_samples}-{total_n_samples}-{iter_num}.pdf")
SIG_COSINE_PLOT=join(OUTPUT_DIR, "stm-cosine-similarity_{covariates}_{K}_{n_samples}-{total_n_samples}-{iter_num}.pdf")

MODEL_SELECTION_OUTPUT=join(RAW_DIR)

# parameters
seed = "123456"
ACTIVE_SIGS= [1, 2, 3, 5]
N_SAMPLES=range(50, 300, 50)
ITER_RANGE=range(0,2)
N_FOLDS=5
FOLDS=range(0, N_FOLDS)
min_K = 2
max_K = 8
K_RANGE=range(min_K, max_K+1)
SHUFFLE_RANGE=range(0,1000)

covariates=["feature1", "NULL"]


# Top Level Rules
rule figure_1:
    input:
        expand(COSINE_PLOT, K=4),
        expand(MSE_PLOT, K=4),


rule somatic_signatures_output:
    input:
        expand(MSE_TABLE, K="{K}", covariates="NULL", model="SS"),
        expand(COSINE_TABLE, K="{K}", covariates="NULL", model="SS")

rule stm_output:
    input:
        expand(COSINE_TABLE, model=["stm"], covariates=["feature1", "NULL"], K="{K}"),
        expand(MSE_TABLE, K="{K}", covariates=["feature1", "NULL"], model="stm"),

rule calculate_covariate_significance:
    input:
        expand(EMP_COV_SIG_FILE, K=4, n_samples=N_SAMPLES, total_n_samples=250, iter_num=0, covariates="feature1", covariate_of_interest="feature1"),

rule covariate_empirical_significance:
    input:
        COV_SIG_FILE.format(covariates="{covariates}", covariate_of_interest="{covariate_of_interest}", n_samples="{n_samples}", total_n_samples="{total_n_samples}", iter_num="{iter_num}", K="{K}"),
        expand(SHUFFLED_COV_SIG_FILE, covariates="{covariates}", covariate_of_interest="{covariate_of_interest}", n_samples="{n_samples}", total_n_samples="{total_n_samples}", iter_num="{iter_num}", K="{K}", shuffle_num=SHUFFLE_RANGE),
    output:
        EMP_COV_SIG_FILE
    script:
        "../src/calculate_empirical_covariate_significance.py"


rule covariate_significance:
    input:
        SIGMA_FILE,
        GAMMA_FILE,
        EXP_FEATURES_FILE
    params:
        seed=seed
    output:
        COV_SIG_FILE
    script:
        "../src/estimate_significance.py"

rule shuffle_covariates:
    params:
        seed=seed
    input:
        EXP_MC_FILE,
        EXP_FEATURES_FILE,
    output:
        SHUFFLED_MC_FILE,
        SHUFFLED_FEATURE_FILE
    script:
        "../src/shuffle_covariates.py"

rule shuffled_covariate_significance:
    input:
        SHUFFLED_SIGMA_FILE,
        SHUFFLED_GAMMA_FILE,
        SHUFFLED_FEATURE_FILE
    params:
        seed=seed
    output:
        SHUFFLED_COV_SIG_FILE
    script:
        "../src/estimate_significance.py"


rule combine_stm_heldout_likelihood_files:
    input:
        expand(STM_HELDOUT_LIKELIHOOD_FILE, K = K_RANGE, n_samples="{n_samples}",
               total_n_samples="{total_n_samples}", iter_num="{iter_num}", fold=FOLDS, covariates="{covariates}")
    output:
        STM_COMBINED_HELDOUT_LIKELIHOOD_FILE
    script:
        "../src/combine_heldout_likelihood_files.py"

rule split_test_training_data:
    input:
        EXP_MC_FILE,
        EXP_FEATURES_FILE
    params:
        seed=seed,
        n_folds=N_FOLDS,
        feature="feature1"
    output:
        TEST_MC_FILE,
        TRAIN_MC_FILE,
        TEST_FEATURE_FILE,
        TRAIN_FEATURE_FILE
    script:
        "../src/stratified_split_test_training_data.py"


rule plot_stm_ctm_cosine_similarity:
    input:
        expand(COSINE_TABLE, model=["stm"], covariates=["feature1", "NULL"], K="{K}"),
        expand(COSINE_TABLE, model=["SS"], covariates="NULL", K="{K}")
    output:
        COSINE_PLOT
    script:
        "src/plot_all_cosine_similarity.py"

rule combine_cosine_similarity:
    input:
        expand(COSINE_SIM, K="{K}", n_samples=N_SAMPLES, total_n_samples=N_SAMPLES[-1], iter_num=ITER_RANGE, model="{model}", covariates="{covariates}")
    output:
        COSINE_TABLE
    script:
        "src/combine_cosine_similarities.py"

rule cosine_similarity:
    input:
        EXP_SIGNATURES_FILE,
        GT_SIGNATURES_FILE
    output:
        COSINE_SIM
    script:
        "src/compare_signatures.py"

rule plot_mse:
    input:
        expand(MSE_TABLE, K="{K}", covariates=["feature1", "NULL"], model="stm"),
        expand(MSE_TABLE, K="{K}", covariates="NULL", model="SS")
    output:
        MSE_PLOT
    script:
        "src/plot_all_mse.py"

rule combine_exposures_mse:
    input:
        expand(DIFFERENTIAL_EXPOSURE_FILE, K="{K}", n_samples=N_SAMPLES, total_n_samples=N_SAMPLES[-1], iter_num=ITER_RANGE, model="{model}", covariates="{covariates}")
    output:
        MSE_TABLE
    script:
        "src/combine_mse.py"

rule calculate_differential_exposure:
    input:
        EXP_EXPOSURES_FILE,
        EXP_SIGNATURES_FILE,
        GT_SIGNATURES_FILE,
        EXP_GT_EXPOSURES_FILE
    output:
        DIFFERENTIAL_EXPOSURE_FILE
    script:
        "src/calculate_exposure_difference.py"


rule subsample_dmr_data:
    input:
        FEATURES_FILE,
        MC_FILE,
        GT_EXPOSURES_FILE
    output:
        EXP_FEATURES_FILE,
        EXP_MC_FILE,
        EXP_GT_EXPOSURES_FILE
    script:
        "src/subsample_dmr_data.py"

rule simulate_dmr_data:
    input:
        topics_file=COSMIC_SIGNATURES,
        features_file=FEATURES_FILE,
        lambda_file=LAMBDA_FILE,
        n_mutation_distribution=N_MUTATION_DISTRIBUTION_FILE
    output:
        documents_file=DOC_FILE,
        model_file=MODEL_FILE,
        matrix_file=MC_FILE,
        signature_file=GT_SIGNATURES_FILE,
        exposures_file=GT_EXPOSURES_FILE
    shell:
        "python src/sim_dmr_data.py -tf {input.topics_file} -ff {input.features_file}\
        -l {input.lambda_file} -enm {input.n_mutation_distribution} -at {ACTIVE_SIGS}\
        -n {wildcards.total_n_samples} -od {output.documents_file} -om {output.model_file} \
        -omf {output.matrix_file} -os {output.signature_file} -oe {output.exposures_file} \
        -ni {wildcards.iter_num}"

rule generate_BRCAness_data:
    params:
        seed=seed
    output:
        FEATURES_FILE
    script:
        "src/generate_clinical_data.py"

rule generate_lambdas:
    output:
        LAMBDA_FILE
    script:
        "src/generate_handcrafted_lambdas.py"

# Download and process COSMIC signatures
# rule download_cosmic_signatures:
#     params:
#         url=COSMIC_GENOME_SIGS_URL
#     output:
#         COSMIC_SIGNATURES
#     shell:
#         'wget -O {output} {params.url}'

rule create_n_mutations_distribution_file:
    input:
        SBS96_COUNT_FILE
    output:
        N_MUTATION_DISTRIBUTION_FILE
    script:
        "src/create_n_mutations_empirical_distribution.py"

rule download_cancer_type_counts:
    params:
        SBS96_COUNT_URL
    output:
        SBS96_COUNT_FILE
    shell:
        "wget -O {output} {params}"
