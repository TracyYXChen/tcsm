from os.path import join

subworkflow dataworkflow:
    workdir:
        "../TCGA-data"

include: "../Snakefile"
include: '../signature-visualization/Snakefile'

OUTPUT_DIR = 'processed'
RAW_DIR = 'raw'
DATA_DIR = 'data'

# Files from TCGA-data subworkflow
CLINICAL_FILE=join(OUTPUT_DIR, "TCGA-{cancer_type}_clinical.tsv")
LST_FEATURE_FILE=join(OUTPUT_DIR, "TCGA-{cancer_type}_LST_feature.tsv")
MSI_CLASSIFICATION_FILE=join(OUTPUT_DIR, "TCGA-{cancer_type}_msi-classification_Hause2016.tsv")
RAW_MUTATION_COUNT_MATRIX_FILE=join(RAW_DIR, "TCGA-{cancer_type}_mutation_count.tsv")
CC_TT_DINUCS_FILE=join(OUTPUT_DIR, "TCGA-{cancer_type}_dinucs.tsv")

# Inclusion-Exclusion file for melanoma samples
IN_EX_MELANOMA_SAMPLES=join(DATA_DIR, "Included-Excluded.xlsx")

# Processed Files
# these include all samples
TEMP_MC_FILE=join(OUTPUT_DIR, "temp-mutation-count-all_TCGA-{cancer_type}.tsv")
MC_FILE=join(OUTPUT_DIR, "mutation-count-all_TCGA-{cancer_type}.tsv")
TEMP_FEATURE_FILE=join(OUTPUT_DIR, "temp-features-all_TCGA-{cancer_type}.tsv")
FEATURE_FILE=join(OUTPUT_DIR, "features-all_TCGA-{cancer_type}.tsv")

TEST_FEATURE_FILE=join(OUTPUT_DIR, "features-test_TCGA-{cancer_type}_{fold}.tsv")
TEST_MC_FILE=join(OUTPUT_DIR, "mutation-count-test_TCGA-{cancer_type}_{fold}.tsv")
TRAIN_FEATURE_FILE=join(OUTPUT_DIR, "features-train_TCGA-{cancer_type}_{fold}.tsv")
TRAIN_MC_FILE=join(OUTPUT_DIR, "mutation-count-train_TCGA-{cancer_type}_{fold}.tsv")

# Files from STM
STM_NORMALIZED_EXPOSURES_FILE=join(OUTPUT_DIR, 'stm-all-normalized-exposures_{covariates}_{K}_TCGA-{cancer_type}.tsv')
STM_SIGNATURES_FILE=join(OUTPUT_DIR, 'stm-exome-signatures_{covariates}_{K}_TCGA-LUSCSKCM.tsv')
SIG_COSINE_PLOT=join(OUTPUT_DIR, "{method}-cosine-similarity_{covariates}_{K}_TCGA-{cancer_type}.pdf")
STM_HELDOUT_LIKELIHOOD_FILE=join(OUTPUT_DIR, 'stm-heldout-likelihood_{covariates}_{K}_TCGA-LUSCSKCM_{fold}.tsv')
STM_COMBINED_HELDOUT_LIKELIHOOD_FILE=join(OUTPUT_DIR, 'stm-combined-heldout_{covariates}_TCGA-{cancer_type}.tsv')
LIKELIHOOD_PLOT=join(OUTPUT_DIR,'likelihood-plot_{covariates1}_{covariates2}_TCGA-LUNG.pdf')
SIG_PLOT=join(OUTPUT_DIR, "{method}-signatures_{covariates}_{K}_TCGA-LUSCSKCM.pdf")
STM_HELDOUT_LIKELIHOOD_RATIO_FILE=join(OUTPUT_DIR, 'stm-heldout-ratio_{covariate_of_interest}_{covariates}_{K}_TCGA-{cancer_type}_{fold}.tsv')
COMBINED_STM_HELDOUT_LIKELIHOOD_RATIO_FILE=join(OUTPUT_DIR, 'stm-combined-heldout-ratio_{covariate_of_interest}_{covariates}_{K}_TCGA-{cancer_type}.tsv')
STM_BOXPLOT=join(OUTPUT_DIR, "stm-boxplot_{covariate_of_interest}_{covariates}_{K}_TCGA-{cancer_type}.pdf")
SKCM_ENRICHMENT_FILE=join(OUTPUT_DIR, "stm-skcm-enrichment_{covariate_of_interest}_{covariates}_{K}_TCGA-{cancer_type}.pdf")
RATIO_DNP_SCATTER_PLOT=join(OUTPUT_DIR, "stm-dnp-plot_{covariate_of_interest}_{covariates}_{K}_TCGA-{cancer_type}.pdf")
NULL_CANCERTYPE_COVARIATE_LIKELIHOOD_PLOT=join(OUTPUT_DIR,'likelihood-plot_null-cancertype-covariate_TCGA-LUSCSKCM.pdf')
CANCERTYPE_LUSC_SKCM_LIKELIHOOD_PLOT=join(OUTPUT_DIR,'likelihood-plot_cancertype-LUSC-SKCM-covariate_TCGA-LUSCSKCM.pdf')
# Model Files
SIGMA_FILE=join(OUTPUT_DIR, 'stm-sigma_{covariates}_{K}_TCGA-{cancer_type}.tsv')
GAMMA_FILE=join(OUTPUT_DIR, 'stm-gamma_{covariates}_{K}_TCGA-{cancer_type}.tsv')
COV_SIG_FILE=join(OUTPUT_DIR, 'stm-covariate-significance_{covariate_of_interest}_{covariates}_{K}_TCGA-{cancer_type}.tsv')
# Parameters
seed="123456"
N_FOLDS=5
FOLDS=range(0, N_FOLDS)

all_covariates="SKCM+LUSC+Smoker+DNPs"
cancertype_covariates="SKCM+LUSC"
CANCER_TYPES=["SKCM", "LUSC"]
MIN_K=2
MAX_K=10
K_RANGE=range(MIN_K, MAX_K+1, 1)
K=4


rule figure_3:
    input:
        NULL_CANCERTYPE_COVARIATE_LIKELIHOOD_PLOT,
        SIG_COSINE_PLOT.format(method="stm", covariates="CancerType", K=K, cancer_type="LUSCSKCM"),
        RATIO_DNP_SCATTER_PLOT.format(covariate_of_interest="CancerType", covariates="CancerType", K=K, cancer_type="LUSCSKCM")

rule supplemental_figures:
    input:
        SIG_PLOT.format(method="stm", covariates="CancerType", K=K),
        CANCERTYPE_LUSC_SKCM_LIKELIHOOD_PLOT

rule calculate_covariate_significance:
    input:
        COV_SIG_FILE.format(covariates="LUSC+SKCM", covariate_of_interest="LUSC", cancer_type="LUSCSKCM", K=K),
        COV_SIG_FILE.format(covariates="LUSC+SKCM", covariate_of_interest="SKCM", cancer_type="LUSCSKCM", K=K)


rule all:
    input:
        # expand(STM_SIGNATURES_FILE, covariates=covariates, K=4)
        # expand(COV_SIG_FILE, covariate_of_interest="Smoker", covariates=covariates, K=K, cancer_type="LUSCSKCM"),
        # expand(COMBINED_DNP_FILE, cancer_type=["LUSC", "SKCM"]),
        # expand(RATIO_DNP_SCATTER_PLOT, covariate_of_interest=covariates, covariates=covariates, K=4, cancer_type="LUNG"),
        # dinucsworkflow(expand(FIREHOSE_DNP_FILE, cancer_type=["LUSC", "SKCM"])),
        # expand(MC_FILE, cancer_type="SKCM"),
        # expand(SKCM_ENRICHMENT_FILE, covariate_of_interest=covariates, covariates=covariates, K=4, cancer_type="LUNG"),
        # expand(STM_BOXPLOT, method="stm", covariate_of_interest="CancerType", covariates="CancerType+Smoker+DNPs", cancer_type="LUSCSKCM", K=4),
        # expand(STM_BOXPLOT, method="stm", covariate_of_interest="SKCM", covariates="SKCM+LUSC", cancer_type="LUSCSKCM", K=4),
        # expand(SIG_COSINE_PLOT, method="stm", covariates=covariates, K=4, cancer_type="LUSCSKCM"),
        # expand(STM_COMBINED_HELDOUT_LIKELIHOOD_FILE, covariates=covariates, project="TCGA-LUAD"),


rule covariate_significance:
    input:
        SIGMA_FILE,
        GAMMA_FILE,
        FEATURE_FILE
    params:
        seed=seed
    output:
        COV_SIG_FILE
    script:
        "../src/simulate_logistic_normal.py"

rule combine_heldout_ratio_files:
    input:
        expand(STM_HELDOUT_LIKELIHOOD_RATIO_FILE, covariates="{covariates}", covariate_of_interest="{covariate_of_interest}", fold=FOLDS, K="{K}", cancer_type="{cancer_type}")
    output:
        COMBINED_STM_HELDOUT_LIKELIHOOD_RATIO_FILE
    script:
        "src/combine_stm_heldout_ratio_files.py"

rule calculate_enrichment:
    input:
        COMBINED_STM_HELDOUT_LIKELIHOOD_RATIO_FILE,
        dataworkflow(expand(CC_TT_DINUCS_FILE, cancer_type=["LUSC", "SKCM"])),
    output:
        SKCM_ENRICHMENT_FILE
    script:
        "src/calculate_enrichment.py"

rule ratio_dnp_scatter_plot:
    input:
        COMBINED_STM_HELDOUT_LIKELIHOOD_RATIO_FILE
    output:
        RATIO_DNP_SCATTER_PLOT
    script:
        "src/plot_ratio_dnp.py"

rule plot_likelihood_cancertype_LUSC_SKCM:
    input:
        expand(STM_COMBINED_HELDOUT_LIKELIHOOD_FILE, covariates=["LUSC+SKCM", "CancerType"], cancer_type="LUSCSKCM")
    output:
        CANCERTYPE_LUSC_SKCM_LIKELIHOOD_PLOT
    script:
        "../src/plot_likelihoods.py"

rule plot_likelihood_cancertype_allcovariate_null:
    input:
        expand(STM_COMBINED_HELDOUT_LIKELIHOOD_FILE, covariates=["NULL", cancertype_covariates, all_covariates], cancer_type="LUSCSKCM")
    output:
        NULL_CANCERTYPE_COVARIATE_LIKELIHOOD_PLOT
    script:
        "../src/plot_likelihoods.py"

rule plot_heldout_ratio:
    input:
        expand(STM_HELDOUT_LIKELIHOOD_RATIO_FILE, covariates="{covariates}", covariate_of_interest="{covariate_of_interest}", fold=FOLDS, K="{K}", cancer_type="{cancer_type}")
    output:
        STM_BOXPLOT
    script:
        "src/plot_heldout_ratio.py"

rule compare_to_cosmic:
    input:
        expand(SIG_COSINE_PLOT, method="stm", covariates=all_covariates, K=4, cancer_type="LUSCSKCM")

rule model_selection:
    input:
        expand(LIKELIHOOD_PLOT, covariates1="NULL", covariates2=all_covariates),

rule combine_stm_heldout_likelihood_files:
    input:
        expand(STM_HELDOUT_LIKELIHOOD_FILE, K = K_RANGE, fold=FOLDS, covariates="{covariates}")
    output:
        STM_COMBINED_HELDOUT_LIKELIHOOD_FILE
    script:
        "../src/combine_heldout_likelihood_files.py"


rule combine_train_mc_file:
    input:
        expand(TRAIN_MC_FILE, cancer_type=CANCER_TYPES, fold="{fold}")
    output:
        TRAIN_MC_FILE.format(cancer_type="LUSCSKCM", fold="{fold}")
    script:
        "../src/combine_cancer_specific_files.py"

rule combine_test_mc_file:
    input:
        expand(TEST_MC_FILE, cancer_type=CANCER_TYPES, fold="{fold}")
    output:
        TEST_MC_FILE.format(cancer_type="LUSCSKCM", fold="{fold}")
    script:
        "../src/combine_cancer_specific_files.py"

rule combine_train_feature_file:
    input:
        expand(TRAIN_FEATURE_FILE, cancer_type=CANCER_TYPES, fold="{fold}")
    output:
        TRAIN_FEATURE_FILE.format(cancer_type="LUSCSKCM", fold="{fold}")
    script:
        "../src/combine_cancer_specific_files.py"

rule combine_test_feature_file:
    input:
        expand(TEST_FEATURE_FILE, cancer_type=CANCER_TYPES, fold="{fold}")
    output:
        TEST_FEATURE_FILE.format(cancer_type="LUSCSKCM", fold="{fold}")
    script:
        "../src/combine_cancer_specific_files.py"

rule combine_feature_files:
    input:
        expand(FEATURE_FILE, cancer_type=CANCER_TYPES)
    output:
        FEATURE_FILE.format(cancer_type="LUSCSKCM")
    script:
        "../src/combine_cancer_specific_files.py"

rule combine_mutation_count_files:
    input:
        expand(MC_FILE, cancer_type=CANCER_TYPES)
    output:
        MC_FILE.format(cancer_type="LUSCSKCM")
    script:
        "../src/combine_cancer_specific_files.py"

rule split_test_training_data:
    wildcard_constraints:
        cancer_type="LUSC|SKCM"
    input:
        MC_FILE,
        FEATURE_FILE
    params:
        seed=seed,
        n_folds=N_FOLDS
    output:
        TEST_MC_FILE,
        TRAIN_MC_FILE,
        TEST_FEATURE_FILE,
        TRAIN_FEATURE_FILE
    script:
        "../src/split_test_training_data.py"

rule exclude_certain_melanomas:
    wildcard_constraints:
        cancer_type="LUSC|SKCM"
    input:
        TEMP_MC_FILE,
        TEMP_FEATURE_FILE,
        IN_EX_MELANOMA_SAMPLES
    output:
        MC_FILE,
        FEATURE_FILE
    script:
        "src/exclude_specific_samples.py"


rule clean_feature_mutation_count:
    wildcard_constraints:
        cancer_type="SKCM|LUSC"
    params:
        seed=seed
    input:
        dataworkflow(RAW_MUTATION_COUNT_MATRIX_FILE),
        dataworkflow(CLINICAL_FILE),
        dataworkflow(CC_TT_DINUCS_FILE)
    output:
        TEMP_MC_FILE,
        TEMP_FEATURE_FILE
    script:
        "../src/create_feature_file.py"
